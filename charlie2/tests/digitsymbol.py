"""Digit-symbol test.

This test was originally designed by D. Glahn for an earlier computerised test battery
called STAN [1]. Although it shares its name with a pen-and-paper test found in the
WAIS-III [2], it is not known how performance on the two tests is related.

On each trial, the proband sees a key of digits and symbols at the top of the screen, as
well as a single digit and a single symbol in the centre of the screen. The proband
indicates whether the target symbol matches the target digit according to the key by
responding either 'yes' or 'no'. During a test block, the proband completes as many
trials as they can within 90 seconds. The symbols currently the same as those in the
STAN.

This test is modified from Charlie version 1 [3] to include a second 90-s test block.
The blocks are identical in design.

Summary statistics:

    <first or both>_completed: number of trials completed
    <first or both>_correct: number of trials correct
    <first or both>_adjusted: correct * proportion correct

References:

[1] Glahn, D.C., Almasy, L., Blangero, J., Burk, G.M., Estrada, J., Peralta, J. M., et
al. (2007). Adjudicating neurocognitive endophenotypes for schizophrenia. Am. J. Med.
Genet. B. Neuropsychiatr. Genet., 44B(2):242-249.

[2] The Psychological Corporation. (1997). WAIS-III/WMS-III technical manual. San
Antonio, TX: The Psychological Corporation.

[3] Mathias, S.R., Knowles, E.E.M., Barrett, J., Leach, O., Buccheri S., Beetham, T., et
al. (2017). The processing- speed impairment in psychosis is more than just accelerated
aging. Schizophr. Bull., 43(4), 814â€“823.

"""
from PyQt5.QtCore import Qt
from charlie2.tools.qt import ExpWidget


class Test(ExpWidget):
    def gen_control(self):
        """For this test, trials require the block number, trial number, digit,
        symbol, and whether the digit and symbol are the same. There is an
        arbitrarily large number of trials (600). The task will almost
        certainly before all trials are completed.

        """
        blocks = ([0] * 5) + ([1] * 295) + ([2] * 300)
        block_type = (["practice"] * 5) + (["test"] * 595)
        trials = list(range(5)) + list(range(295)) + list(range(300))
        digits = [
            7,
            1,
            5,
            9,
            2,
            4,
            1,
            6,
            6,
            7,
            7,
            9,
            1,
            8,
            8,
            8,
            1,
            7,
            2,
            2,
            5,
            1,
            1,
            9,
            5,
            2,
            7,
            9,
            3,
            1,
            7,
            1,
            2,
            2,
            1,
            1,
            2,
            2,
            1,
            8,
            1,
            1,
            3,
            3,
            7,
            2,
            4,
            5,
            5,
            9,
            8,
            6,
            1,
            8,
            6,
            8,
            3,
            1,
            5,
            8,
            8,
            7,
            2,
            5,
            1,
            1,
            2,
            1,
            4,
            6,
            9,
            7,
            7,
            5,
            8,
            8,
            6,
            8,
            1,
            2,
            5,
            7,
            4,
            5,
            3,
            3,
            9,
            2,
            4,
            9,
            7,
            5,
            6,
            4,
            4,
            1,
            1,
            8,
            2,
            2,
            5,
            9,
            8,
            6,
            8,
            2,
            9,
            4,
            8,
            4,
            3,
            1,
            1,
            8,
            8,
            1,
            6,
            1,
            6,
            4,
            4,
            4,
            7,
            3,
            2,
            8,
            8,
            8,
            2,
            4,
            4,
            5,
            8,
            8,
            2,
            5,
            3,
            1,
            1,
            1,
            8,
            7,
            3,
            4,
            4,
            3,
            5,
            4,
            2,
            4,
            6,
            1,
            3,
            3,
            1,
            7,
            6,
            7,
            9,
            3,
            8,
            7,
            5,
            4,
            5,
            5,
            6,
            9,
            5,
            2,
            9,
            1,
            8,
            3,
            1,
            1,
            1,
            5,
            5,
            8,
            1,
            8,
            9,
            2,
            1,
            7,
            6,
            1,
            7,
            9,
            4,
            2,
            5,
            6,
            2,
            5,
            2,
            7,
            3,
            7,
            9,
            4,
            3,
            1,
            3,
            6,
            1,
            5,
            2,
            4,
            8,
            5,
            1,
            5,
            7,
            4,
            4,
            9,
            6,
            3,
            6,
            3,
            9,
            1,
            9,
            2,
            1,
            5,
            2,
            1,
            4,
            6,
            9,
            6,
            5,
            7,
            2,
            5,
            8,
            5,
            9,
            2,
            4,
            7,
            8,
            3,
            9,
            1,
            9,
            1,
            7,
            2,
            8,
            7,
            4,
            1,
            3,
            2,
            1,
            6,
            4,
            7,
            6,
            1,
            7,
            5,
            4,
            4,
            2,
            3,
            6,
            8,
            3,
            4,
            9,
            9,
            3,
            7,
            3,
            6,
            6,
            6,
            5,
            5,
            1,
            2,
            9,
            7,
            1,
            1,
            9,
            5,
            3,
            3,
            8,
            6,
            5,
            8,
            5,
            6,
            5,
            6,
            1,
            6,
            1,
            8,
            5,
            5,
            5,
            8,
            5,
            9,
            1,
            9,
            9,
            6,
            1,
            6,
            9,
            4,
            8,
            1,
            2,
            5,
            1,
            5,
            8,
            6,
            3,
            6,
            1,
            8,
            4,
            2,
            9,
            9,
            4,
            3,
            2,
            1,
            8,
            7,
            8,
            5,
            2,
            7,
            3,
            2,
            9,
            4,
            9,
            3,
            7,
            7,
            7,
            5,
            9,
            7,
            3,
            5,
            5,
            2,
            4,
            6,
            9,
            6,
            3,
            2,
            4,
            4,
            7,
            8,
            9,
            4,
            2,
            1,
            5,
            1,
            8,
            7,
            5,
            8,
            6,
            8,
            7,
            1,
            4,
            7,
            7,
            3,
            7,
            3,
            1,
            2,
            5,
            4,
            1,
            4,
            8,
            3,
            6,
            7,
            3,
            6,
            9,
            2,
            9,
            9,
            1,
            3,
            1,
            7,
            3,
            6,
            6,
            1,
            5,
            1,
            5,
            7,
            4,
            8,
            4,
            7,
            8,
            5,
            6,
            3,
            3,
            2,
            9,
            9,
            4,
            5,
            5,
            8,
            2,
            8,
            2,
            2,
            2,
            8,
            5,
            1,
            1,
            9,
            6,
            6,
            6,
            3,
            2,
            3,
            1,
            5,
            8,
            4,
            8,
            5,
            7,
            7,
            8,
            7,
            1,
            3,
            4,
            3,
            5,
            9,
            6,
            3,
            7,
            6,
            7,
            5,
            3,
            5,
            4,
            2,
            9,
            5,
            2,
            5,
            1,
            7,
            7,
            4,
            1,
            4,
            1,
            2,
            1,
            2,
            8,
            1,
            3,
            6,
            3,
            8,
            4,
            7,
            6,
            9,
            3,
            2,
            2,
            5,
            8,
            2,
            6,
            9,
            3,
            4,
            7,
            7,
            6,
            6,
            2,
            9,
            3,
            7,
            8,
            8,
            8,
            6,
            8,
            2,
            4,
            1,
            5,
            1,
            9,
            8,
            9,
            3,
            9,
            2,
            3,
            6,
            4,
            8,
            9,
            5,
            3,
            7,
            7,
            1,
            7,
            5,
            6,
            7,
            5,
            1,
            4,
            8,
            4,
            4,
            8,
            2,
            6,
            2,
            8,
            9,
            1,
            3,
            7,
            9,
            2,
            4,
            1,
            3,
            6,
            9,
            7,
            3,
            2,
            3,
            2,
            2,
            8,
            8,
            8,
            4,
            6,
            3,
            1,
            4,
            2,
            5,
            9,
            8,
            6,
            1,
            9,
            4,
            7,
            1,
            4,
            8,
            1,
            2,
        ]
        symbols = [
            2,
            1,
            5,
            6,
            7,
            4,
            1,
            9,
            6,
            6,
            7,
            9,
            7,
            5,
            8,
            7,
            1,
            5,
            9,
            7,
            9,
            6,
            1,
            9,
            5,
            2,
            7,
            9,
            3,
            1,
            5,
            1,
            4,
            2,
            1,
            1,
            5,
            9,
            3,
            7,
            1,
            7,
            3,
            1,
            7,
            2,
            4,
            5,
            5,
            3,
            9,
            6,
            1,
            8,
            9,
            4,
            1,
            1,
            5,
            8,
            8,
            7,
            1,
            7,
            7,
            8,
            2,
            1,
            4,
            8,
            9,
            7,
            7,
            6,
            8,
            8,
            6,
            8,
            3,
            9,
            5,
            7,
            8,
            6,
            3,
            8,
            9,
            2,
            4,
            9,
            6,
            6,
            6,
            6,
            4,
            9,
            1,
            5,
            2,
            2,
            7,
            2,
            8,
            6,
            8,
            2,
            4,
            3,
            8,
            4,
            3,
            1,
            1,
            1,
            4,
            1,
            1,
            1,
            9,
            7,
            6,
            7,
            7,
            3,
            2,
            8,
            8,
            8,
            7,
            4,
            4,
            5,
            4,
            3,
            2,
            8,
            1,
            8,
            1,
            1,
            3,
            6,
            3,
            9,
            4,
            3,
            9,
            4,
            2,
            4,
            6,
            1,
            2,
            3,
            1,
            7,
            1,
            1,
            8,
            3,
            6,
            1,
            1,
            2,
            5,
            8,
            6,
            9,
            5,
            6,
            9,
            6,
            7,
            2,
            1,
            7,
            1,
            5,
            3,
            8,
            1,
            1,
            3,
            4,
            1,
            2,
            6,
            1,
            9,
            9,
            8,
            2,
            5,
            4,
            9,
            5,
            2,
            1,
            3,
            3,
            4,
            7,
            9,
            1,
            3,
            5,
            1,
            5,
            2,
            2,
            8,
            2,
            1,
            2,
            1,
            7,
            2,
            9,
            4,
            3,
            9,
            2,
            8,
            1,
            2,
            2,
            1,
            4,
            7,
            7,
            2,
            9,
            9,
            1,
            4,
            7,
            6,
            5,
            7,
            5,
            6,
            2,
            4,
            2,
            8,
            3,
            9,
            1,
            9,
            5,
            7,
            5,
            8,
            8,
            2,
            1,
            3,
            3,
            4,
            6,
            4,
            4,
            6,
            1,
            7,
            7,
            7,
            4,
            1,
            3,
            6,
            8,
            3,
            4,
            4,
            9,
            2,
            3,
            3,
            4,
            6,
            8,
            5,
            5,
            1,
            5,
            5,
            3,
            1,
            1,
            9,
            9,
            8,
            3,
            8,
            6,
            3,
            8,
            5,
            6,
            5,
            6,
            1,
            6,
            1,
            8,
            5,
            5,
            9,
            8,
            1,
            9,
            1,
            2,
            1,
            6,
            1,
            4,
            7,
            4,
            8,
            2,
            2,
            9,
            1,
            3,
            8,
            6,
            1,
            6,
            1,
            8,
            4,
            3,
            9,
            9,
            4,
            3,
            9,
            2,
            8,
            2,
            7,
            5,
            9,
            7,
            1,
            2,
            1,
            4,
            1,
            3,
            1,
            7,
            9,
            1,
            3,
            7,
            3,
            5,
            5,
            8,
            5,
            7,
            4,
            6,
            5,
            9,
            4,
            4,
            7,
            8,
            7,
            3,
            2,
            4,
            5,
            1,
            9,
            7,
            5,
            1,
            6,
            8,
            8,
            4,
            4,
            7,
            7,
            1,
            7,
            1,
            4,
            4,
            5,
            4,
            4,
            4,
            8,
            3,
            2,
            7,
            8,
            6,
            6,
            2,
            5,
            9,
            8,
            3,
            1,
            7,
            3,
            8,
            7,
            1,
            5,
            8,
            5,
            3,
            7,
            6,
            4,
            7,
            8,
            5,
            9,
            9,
            3,
            1,
            5,
            9,
            4,
            7,
            5,
            8,
            9,
            8,
            2,
            2,
            2,
            8,
            3,
            1,
            1,
            2,
            3,
            6,
            6,
            3,
            2,
            7,
            1,
            4,
            8,
            4,
            8,
            6,
            7,
            7,
            7,
            2,
            1,
            8,
            4,
            2,
            5,
            4,
            6,
            8,
            7,
            6,
            7,
            5,
            1,
            3,
            1,
            2,
            7,
            2,
            2,
            6,
            1,
            9,
            7,
            5,
            1,
            6,
            8,
            3,
            1,
            1,
            5,
            4,
            3,
            6,
            3,
            2,
            6,
            8,
            6,
            9,
            3,
            7,
            3,
            5,
            8,
            1,
            4,
            8,
            3,
            3,
            9,
            7,
            6,
            6,
            2,
            4,
            3,
            2,
            8,
            8,
            7,
            6,
            3,
            2,
            4,
            1,
            7,
            6,
            4,
            8,
            2,
            3,
            7,
            2,
            1,
            6,
            4,
            9,
            2,
            8,
            2,
            7,
            1,
            5,
            2,
            5,
            6,
            7,
            5,
            1,
            8,
            8,
            8,
            4,
            8,
            2,
            1,
            2,
            8,
            9,
            1,
            1,
            7,
            8,
            2,
            4,
            4,
            3,
            6,
            4,
            7,
            1,
            2,
            3,
            7,
            8,
            4,
            8,
            8,
            4,
            6,
            5,
            1,
            6,
            2,
            5,
            9,
            8,
            7,
            3,
            1,
            7,
            2,
            8,
            4,
            8,
            3,
            1,
        ]
        matches = [digits[i] == symbols[i] for i in trials]
        names = ["block", "block_type", "trial", "digit", "symbol", "match"]
        details = zip(blocks, block_type, trials, digits, symbols, matches)
        return [dict(zip(names, t)) for t in details]

    def block(self):
        """For this test, display instructions and pre-load the images."""
        # set block timeouts
        if self.data.current_trial_details["block_type"] == "practice":
            self.block_max_time = 15
        else:
            self.block_max_time = 90

        # stop if performance was poor in the first block
        if self.data.current_trial_details['block'] == 2:
            results = [r for r in self.data.results if r['block'] == 1]
            ncorrect = len([r for r in results if r['correct']])
            if ncorrect >= 20:
                self.data.control = []
                self.data.test_done = True
                return

        # display block-specific instructions
        n = self.data.current_trial_details["block"]
        for i in range(len(self.instructions)):
            print(i, self.instructions[i])
        self.display_instructions_with_continue_button(self.instructions[4 + n])

        # load and move key symbols and digits
        self.symbols = [self.load_image(f"sym{i}.png") for i in range(1, 10)]
        self.digits = [self.load_text(str(i)) for i in range(1, 10)]
        self.xs = range(-300, 350, 75)
        for symbol, digit, x in zip(self.symbols, self.digits, self.xs):
            g = self.move_widget(symbol, (x, 250))
            symbol.hide()
            digit.resize(g.size())
            self.move_widget(digit, (x, 200))
            digit.hide()

        # load neutral keyboard arrow keys and labels
        self.l, self.r, *self.arrow_labels = self.load_keyboard_arrow_keys()

    def trial(self):
        """

        """
        # clear the screen, show key and arrow keys
        self.clear_screen()
        self.hide_mouse()
        l = self.symbols + self.digits + [self.l, self.r] + list(self.arrow_labels)
        [im.show() for im in l]

        # select and draw the target symbol and digit
        s = self.data.current_trial_details["symbol"]
        d = self.data.current_trial_details["digit"]
        self.symbol = self.display_image(f"sym{s}.png", (0, 25))
        self.digit = self.display_text(str(d), (0, -25))

    def keyPressEvent(self, event):
        """For this trial, listen for left- and right-arrow keyboard key presses."""
        dic = {Qt.Key_Left: True, Qt.Key_Right: False}

        if self.doing_trial and event.key() in dic.keys():

            # record the response
            response = dic[event.key()]
            rt = self.trial_time.elapsed()
            time_taken = self.block_time.elapsed()
            correct = response == self.data.current_trial_details["match"]
            dic = {
                "response": response,
                "rt": rt,
                "time_taken": time_taken,
                "correct": correct,
            }
            self.data.current_trial_details.update(dic)

            # delete the target digit and symbol widgets
            self.symbol.deleteLater()
            self.digit.deleteLater()

            # feedback?
            if self.data.current_trial_details["block"] == 0:
                self.l.deleteLater()
                self.r.deleteLater()
                a = ["r", "g"][correct]
                if event.key() == Qt.Key_Left:
                    self.l, self.r = self.display_keyboard_arrow_keys(a, '', text=False)
                else:
                    self.l, self.r = self.display_keyboard_arrow_keys('', a, text=False)
                self.sleep(1)
                self.l.deleteLater()
                self.r.deleteLater()
                self.l, self.r = self.display_keyboard_arrow_keys(text=False)

            # move on
            self.next_trial()

    def summarise(self):
        """Summary statistics:

            <first or both>_completed: number of trials completed
            <first or both>_correct: number of trials correct
            <first or both>_adjusted: correct * proportion correct

        """
        first = [f for f in self.data.results if f['block'] == 1]
        both = [f for f in self.data.results if f['block'] > 0]
        return {
            'first_completed': len(first),
            'first_correct': len([f for f in first if f['correct']]),
            'first_adjusted': len([f for f in first if f['correct']]) * (
                    len([f for f in first if f['correct']]) / len(first)),
            'both_completed': len(both),
            'both_correct': len([f for f in both if f['correct']]),
            'both_adjusted': len([f for f in both if f['correct']]) * (
                        len([f for f in both if f['correct']]) / len(both)),
            
        }
